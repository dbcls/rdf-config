#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'getoptlong'
require 'rdf-config'

def help
  puts DATA.read
  exit
end

opts = {
  config_dir: nil,
  mode: nil
}

args = GetoptLong.new(
  ['--config',   '-c',  GetoptLong::REQUIRED_ARGUMENT],
  ['--help',     '-h',  GetoptLong::NO_ARGUMENT],
  ['--senbero',         GetoptLong::NO_ARGUMENT],
  ['--schema',          GetoptLong::OPTIONAL_ARGUMENT],
  ['--endpoint',        GetoptLong::OPTIONAL_ARGUMENT],
  ['--sparql',          GetoptLong::OPTIONAL_ARGUMENT],
  ['--url',             GetoptLong::NO_ARGUMENT],
  ['--query',           GetoptLong::OPTIONAL_ARGUMENT],
  ['--join',            GetoptLong::OPTIONAL_ARGUMENT],
  ['--sparqlist',       GetoptLong::OPTIONAL_ARGUMENT],
  ['--grasp',           GetoptLong::OPTIONAL_ARGUMENT],
  ['--grasp-ns',        GetoptLong::OPTIONAL_ARGUMENT],
  ['--stanza',          GetoptLong::OPTIONAL_ARGUMENT],
  ['--stanza_rb',       GetoptLong::OPTIONAL_ARGUMENT],
  ['--shex',            GetoptLong::OPTIONAL_ARGUMENT],
  ['--debug',           GetoptLong::OPTIONAL_ARGUMENT]
)
args.ordering = GetoptLong::RETURN_IN_ORDER

debug_mode = false
target_opt_name = ''
opt_values = {}
begin
  args.each_option do |name, value|
    name = name.to_s.strip
    target_opt_name = name unless name.empty?
    if opt_values.key?(target_opt_name)
      opt_values[target_opt_name] << value
    else
      opt_values[target_opt_name] = [value]
    end
  end
rescue StandardError
  puts
  help
  exit(1)
end

opt_values.each do |opt_name, values|
  next if values.empty?

  value = if values.size > 1
            values
          else
            values.first
          end
  case opt_name
  when /--config/
    opts[:config_dir] = value
  when /--senbero/
    opts[:mode] = :senbero
  when /--schema/
    opts[:mode] = :chart
    opts[:schema_opt] = value
  when /--sparqlist/
    opts[:mode] = :sparqlist
  when /--sparql/
    opts[:mode] = :sparql
    opts[:sparql] = value
  when /--url/
    opts[:mode] = :sparql_url
  when /--query/
    opts[:query] = value
  when /--endpoint/
    opts[:endpoint_name] = value
  when /--join/
    opts[:mode] = :sparql
    opts[:join] = value
  when '--grasp'
    opts[:mode] = :grasp
    opts[:output_dir] = value
    opts[:add_namespace] = false
  when '--grasp-ns'
    opts[:mode] = :grasp
    opts[:output_dir] = value
    opts[:add_namespace] = true
  when /--stanza_rb/
    opts[:mode] = :stanza_rb
    opts[:stanza_name] = value
  when /--stanza/
    opts[:mode] = :stanza_js
    opts[:stanza_name] = value
  when /--shex/
    opts[:mode] = :shex
  when /--debug/
    debug_mode = true
  end
end

opts[:mode] = :sparql if opts[:mode].nil? && (opts.key?(:query) || opts.key?(:endpoint_name))

if opts[:config_dir] && opts[:mode]
  begin
    rdf_config = RDFConfig.new(opts)
    rdf_config.exec(opts)
  rescue StandardError => e
    warn e.message
    warn e.backtrace if debug_mode
    exit(1)
  end
else
  help
end

__END__
NAME
    rdf-config -- RDF model to SPARQL, Schema, Stanza converter

SYNOPSIS
    rdf-config --config path/to/config/name --sparql     [queryname]
    rdf-config --config path/to/config/name --query      var1 var2=value var3 ...

    Use with --sparql or --query options:
    rdf-config --config path/to/config/name --endpoint   [endpointname]
    rdf-config --config path/to/config/name --url

    rdf-config --config path/to/config/name --schema
    rdf-config --config path/to/config/name --senbero
    rdf-config --config path/to/config/name --grasp      [output_directory]
    rdf-config --config path/to/config/name --grasp-ns   [output_directory]
    rdf-config --config path/to/config/name --stanza     [stanzaname]
    rdf-config --config path/to/config/name --shex
    rdf-config --help

DESCRIPTION

    Read a RDF data model from config/name/ directory
    then generate SPARQL query, exec SPARQL query,
    generate Schema chart, and generate Stanza.

    Configuration files of a RDF model are written
    in the YAML format.

    * config/name/model.yaml: RDF deta model structure and variable names
    * config/name/endpoint.yaml: SPARQL endpoint (default endpoint:)
    * config/name/prefix.yaml: URI prefixes
    * config/name/sparql.yaml: SPARQL definition
    * config/name/stanza.yaml: TogoStanza definition
    * config/name/metadata.yaml: Metadata compatible with NBRC RDF portal
    * config/name/metadata_ja.yaml: Japanese version of Metadata

